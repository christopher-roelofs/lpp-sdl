-- File Processing Utility - Console Mode
-- Run with: ./lpp_sdl -headless samples/sdl/Console/file_processor.lua
-- Demonstrates practical file processing without GUI

print("=== File Processing Utility (Console Mode) ===")
print("Processing files in headless mode...")

-- Configuration
local input_dir = "."
local output_file = "file_report.txt"
local backup_dir = "backup"

-- Helper function to format file size
local function format_size(bytes)
    if not bytes or bytes == 0 then return "0 B" end
    
    local units = {"B", "KB", "MB", "GB"}
    local size = bytes
    local unit_index = 1
    
    while size >= 1024 and unit_index < #units do
        size = size / 1024
        unit_index = unit_index + 1
    end
    
    return string.format("%.1f %s", size, units[unit_index])
end

-- Helper function to format timestamp
local function format_timestamp(timestamp)
    if not timestamp then return "Unknown" end
    return os.date("%Y-%m-%d %H:%M:%S", timestamp)
end

-- Main processing function
local function process_files()
    print("\n1. Scanning directory:", input_dir)
    
    local files = System.listDirectory(input_dir)
    if not files then
        print("   ‚úó Failed to read directory")
        return false
    end
    
    print("   ‚úì Found", #files, "items")
    
    -- Analyze files
    local stats = {
        total_files = 0,
        total_dirs = 0,
        total_size = 0,
        lua_files = 0,
        largest_file = {name = "", size = 0},
        newest_file = {name = "", mtime = 0}
    }
    
    local file_details = {}
    
    for i, item in ipairs(files) do
        if item.directory then
            stats.total_dirs = stats.total_dirs + 1
        else
            stats.total_files = stats.total_files + 1
            stats.total_size = stats.total_size + (item.size or 0)
            
            -- Track Lua files
            if item.name:match("%.lua$") then
                stats.lua_files = stats.lua_files + 1
            end
            
            -- Track largest file
            if (item.size or 0) > stats.largest_file.size then
                stats.largest_file = {name = item.name, size = item.size or 0}
            end
            
            -- Track newest file
            if (item.mtime or 0) > stats.newest_file.mtime then
                stats.newest_file = {name = item.name, mtime = item.mtime or 0}
            end
            
            -- Store file details for report
            table.insert(file_details, {
                name = item.name,
                size = item.size or 0,
                modified = item.mtime or 0,
                type = item.name:match("%.([^%.]+)$") or "unknown"
            })
        end
    end
    
    print("   ‚úì Analysis complete")
    return stats, file_details
end

-- Generate report
local function generate_report(stats, file_details)
    print("\n2. Generating report...")
    
    local report = string.format([[
=== File Processing Report ===
Generated: %s
Directory: %s
Processing Mode: Console/Headless

=== SUMMARY ===
Total Files: %d
Total Directories: %d
Lua Files: %d
Total Size: %s

Largest File: %s (%s)
Newest File: %s (modified %s)

=== FILE DETAILS ===
]], 
        os.date("%Y-%m-%d %H:%M:%S"),
        System.currentDirectory(),
        stats.total_files,
        stats.total_dirs,
        stats.lua_files,
        format_size(stats.total_size),
        stats.largest_file.name,
        format_size(stats.largest_file.size),
        stats.newest_file.name,
        format_timestamp(stats.newest_file.mtime)
    )
    
    -- Sort files by size (largest first)
    table.sort(file_details, function(a, b) return a.size > b.size end)
    
    -- Add top 10 largest files
    report = report .. "Top Files by Size:\n"
    local max_files = math.min(10, #file_details)
    for i = 1, max_files do
        local file = file_details[i]
        report = report .. string.format("  %2d. %-30s %8s  %s  %s\n",
            i,
            file.name,
            format_size(file.size),
            file.type:upper(),
            format_timestamp(file.modified)
        )
    end
    
    -- File type summary
    local type_counts = {}
    for _, file in ipairs(file_details) do
        local ext = file.type
        type_counts[ext] = (type_counts[ext] or 0) + 1
    end
    
    report = report .. "\n=== FILE TYPES ===\n"
    for ext, count in pairs(type_counts) do
        report = report .. string.format("  .%-10s %3d files\n", ext, count)
    end
    
    report = report .. "\n=== PROCESSING INFO ===\n"
    report = report .. "Processed in headless mode (no GUI required)\n"
    report = report .. "Suitable for automated scripts and server environments\n"
    report = report .. "Generated by LPP-SDL Console Mode\n"
    
    return report
end

-- Save report to file
local function save_report(report_content)
    print("\n3. Saving report to:", output_file)
    
    local file_handle = System.openFile(output_file, "w")
    if not file_handle then
        print("   ‚úó Failed to create report file")
        return false
    end
    
    System.writeFile(file_handle, report_content)
    System.closeFile(file_handle)
    
    print("   ‚úì Report saved successfully")
    return true
end

-- Main execution
print("Starting file processing...")

local stats, file_details = process_files()
if not stats then
    print("‚úó Processing failed")
    System.exit()
    return
end

print("\nüìä Processing Results:")
print("   Files:", stats.total_files)
print("   Directories:", stats.total_dirs) 
print("   Lua Files:", stats.lua_files)
print("   Total Size:", format_size(stats.total_size))

local report = generate_report(stats, file_details)
if save_report(report) then
    print("\n‚úÖ File processing complete!")
    print("üìÑ Report available in:", output_file)
else
    print("\n‚ùå Failed to save report")
end

print("\n=== Console Processing Demo Complete ===")
print("This demonstrates how LPP-SDL can process files without any GUI!")

System.exit()