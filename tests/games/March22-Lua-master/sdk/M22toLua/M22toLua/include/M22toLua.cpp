#include "M22toLua.h"

#include <codecvt>
#include <FileOp.h>
#include <fstream>
#include <Label.h>

void WriteCompiledScript(std::wstring _filename, std::vector<std::wstring>& _backgrounds, std::vector<std::wstring>& _lines, std::vector<std::wstring>& _sfx, std::vector<Character>& _characters, std::vector<std::wstring>& _music)
{
	_filename += L".lua";
	myReplace(_filename, L".rpy", L"");
	_filename.insert(0, L"./output/");
	std::wofstream textOutput(_filename);
	_filename.erase(0, 9);
	textOutput.imbue(std::locale(std::locale::empty(), new std::codecvt_utf8<wchar_t, 0x10ffff>));

	textOutput << L"-- This file was automatically generated by M22toLua v" << VERSION_MAJOR << L"." << VERSION_MINOR << L"." << VERSION_PATCH;
	textOutput << L"\n-- For use with March22-Lua\n-- By Sam Lynch\n\n";
	textOutput << L"dofile(\"LUA_CLASSES/Line.lua\");\ndofile(\"March22_background.lua\");\n\n";
	textOutput << L"\nLOADEDSFX = {};\nLOADEDMUSIC = {};\nLABEL_POSITIONS = {};\n";
	textOutput << L"March22.CURRENTSCRIPTNAME = \"" << _filename << L"\";\n\n";

	for (size_t i = 0; i < Label2::LABELS.size(); i++)
	{
		textOutput << L"LABEL_POSITIONS[\"" << Label2::LABELS.at(i).name << L"\"] = " << Label2::LABELS.at(i).position << L";\n";
	}
	textOutput << L"\n\n";

	float percentage = 0.0f;
	for (size_t i = 0; i < _characters.size(); i++)
	{
		percentage = ((((float)i / (float)_characters.size()) * (float)20));
		textOutput << L"UpdateLoadingProgress(" << (int)percentage << L");\n";
		textOutput << GenerateCharacterArray(_characters.at(i));
	}

	for (size_t i = 0; i < _backgrounds.size(); i++)
	{
		percentage = ((((float)i / (float)_backgrounds.size()) * (float)40) + 20);
		textOutput << L"UpdateLoadingProgress(" << (int)percentage << L");\n";
		textOutput << _backgrounds.at(i);
	}
	for (size_t i = 0; i < _sfx.size(); i++)
	{
		percentage = ((((float)i / (float)_sfx.size()) * (float)20) + 60);
		textOutput << L"UpdateLoadingProgress(" << (int)percentage << L");\n";
		textOutput << _sfx.at(i);
	}
	for (size_t i = 0; i < _music.size(); i++)
	{
		percentage = ((((float)i / (float)_music.size()) * (float)20) + 80);
		textOutput << L"UpdateLoadingProgress(" << (int)percentage << L");\n";
		textOutput << _music.at(i);
	}

	textOutput << "\nACTIVE_SCRIPT = {\n";
	for (size_t i = 0; i < _lines.size() - 1; i++)
	{
		textOutput << "	" << _lines.at(i);
	}

	// This is hack to stop a comma appearing at the end of the table
	std::wstring temp = _lines.at(_lines.size() - 1);
	temp.pop_back();
	temp.pop_back();
	textOutput << "	" << temp << '\n';

	textOutput << "};\n";
	textOutput << L"UpdateLoadingProgress(100);\n" << L"SIZE_OF_ACTIVE_SCRIPT = " << _lines.size() << L";\n";
	textOutput.close();
	return;
}
